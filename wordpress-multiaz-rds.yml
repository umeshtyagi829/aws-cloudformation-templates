AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template installs a highly-available, scalable WordPress deployment using a
             multi-az Amazon RDS database instance for storage in custom VPC with Application load balancer 
             and AutoScalling Group.'

            #--------------------------------------------------------------------------------------------------------#
            #                              Resources that will be created are listed below                           #
            #--------------------------------------------------------------------------------------------------------#
            #                              1. VPC                                                                    #
            #                              2. IGW                                                                    #
            #                              3. Nat Gateway                                                            #
            #                              5. Subnets(2 Private and 2 Public)                                        #
            #                              6. Security Groups(for ALB, Instances, DB)                                #
            #                              7. Application Load Balancer                                              #
            #                              8. Auto Scalling Group                                                    #
            #                              9. Launch Configuration                                                   #
            #                              10. RDS                                                                   #
            #--------------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------------#
#                                                 Parameters                                             #
#--------------------------------------------------------------------------------------------------------#
Parameters:
  # VPC CIDR range
  VpcCidr: 
    Type: String
    Description: Vpc Cidr Block

  # Instance Type
  InstanceType: 
    Type: String
    Description: Choose Instance Type
    AllowedValues: ["t2.large", "t2.medium", "t2.micro", "t2.nano", "t2.small"]
    ConstraintDescription: 'must be instance type from ["t2.large", "t2.medium", "t2.micro", "t2.nano", "t2.small"]'

  # Keyname for the instance
  KeyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH keys for instance

  # Database identifier name
  DBInstanceName: 
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and must not end with a hyphen or contain two consecutive hyphens.

  # Cidr for SSH access
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # Database name that will create when RDS instance created
  DBName:
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  # Database RDS instance name
  DBInstanceClass:
    Description: DB instance class
    Type: String
    AllowedValues: ["db.t3.micro", "db.t3.small", "db.t3.medium" ]
    ConstraintDescription: Must select a valid DB instance type.

  # Database Allocated storage
  DBAllocatedStorage:
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '10'
    MaxValue: '65536'
    ConstraintDescription: must be between 10 and 65536 GiB

  # Database username
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters

  # Database password
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  # Multi AZs
  MultiAZ:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Enable or Disable MultiAZ
    ConstraintDescription: Must be value either true or false.
#------------------------------------------------------------------------------------------------#
#                                            Resources                                           #
#------------------------------------------------------------------------------------------------#   
Resources:
  #----------------#
  # Create own VPC #
  #----------------#
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 
        Ref: VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name 
          Value: !Sub VPC-${AWS::StackName}
        - Key: Owner 
          Value: utyagi@presidio.com
  #------------------#
  # Internet Gateway #
  #------------------#
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: myVPC
    Properties:
      Tags: 
        - Key: Name 
          Value: !Sub IGW-${AWS::StackName}
        - Key: Owner 
          Value: utyagi@presidio.com
  #--------------------------------------#
  # Ataching internet gateway to the VPC #
  #--------------------------------------#
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  #-------------#
  # NAT Gateway #
  #-------------#
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  #--------------------#
  # Elastic IP Address #
  #--------------------#
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  #---------------------#
  # First Public Subnet #
  #---------------------#
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 30.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]          
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  #----------------------#
  # Second Public Subnet #
  #----------------------#
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 30.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]   
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  #----------------------#
  # First Private Subnet #
  #----------------------#
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 30.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  #-----------------------#
  # Second Private Subnet #
  #-----------------------#
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 30.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]   
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
  #-------------------------------------------#
  # Public route table for our public subnets #
  #-------------------------------------------#
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: PublicRT
  #----------------------------------------------#
  # Public route table has direct routing to IGW #
  #----------------------------------------------#
  PublicRoute1:  
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  #------------------------------------------#
  # Private route tables for private subnets #
  #------------------------------------------#
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: PrivateRT
  #--------------------------------------------#
  # Private route table can access web via NAT #
  #--------------------------------------------#
  PrivateRoute1:            
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  #--------------------------------------------------#
  # Attach the public subnets to public route tables #
  #--------------------------------------------------#
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  #-----------------------------------------------------#
  # Attach the private subnets to private route tables  #
  #-----------------------------------------------------#
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
 #------------------------------------#
 # Security group for database server #
 #------------------------------------#
  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: security group for RDS database 
      GroupName: sgfordb
      VpcId: !Ref myVPC
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref WebServerSecurityGroup
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
  #-----------------#
  # DB Subnet group #
  #-----------------#
  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup" 
    Properties: 
      DBSubnetGroupDescription: DB Subnet group
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  #--------------#
  # RDS instance #
  #--------------#
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceName
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MySQL
      EngineVersion: 8.0.16
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      MultiAZ: !Ref MultiAZ
      VPCSecurityGroups:
        - !Ref DBSG
  #---------------------------------------------#
  # Security group for application load balancer#
  #---------------------------------------------#      
  ALBServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
      GroupName: sgforalb
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '0.0.0.0/0'
      VpcId:
        Ref: myVPC
  #---------------------------#
  # Application Load Balancer #
  #---------------------------#
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Subnets: 
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      SecurityGroups:
        - Ref: ALBServerSecurityGroup
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: MyALB
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/wordpress/wp-admin/install.php"
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: myVPC
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: '30'
  #------------------------------#
  # Security group for instances #
  #----------------------------- #
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      GroupName: sgforinstance
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - MyALB
            - SecurityGroups
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      VpcId:
        Ref: myVPC
  #---------------------#
  # Auto Scalling Group #
  #---------------------#
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: "2"
      TargetGroupARNs:
      - Ref: ALBTargetGroup
  #----------------------#
  # Launch Configuration #
  #----------------------# 
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "sudo yum update -y"
              - "sudo yum install -y httpd mysql mysqladmin"
              - "sudo amazon-linux-extras install php7.4 -y "
              - "wget https://wordpress.org/latest.tar.gz -P /tmp"
              - "tar -xzf /tmp/latest.tar.gz -C /tmp"
              - "sudo mv /tmp/wordpress/* /var/www/html"
              - "sudo systemctl start httpd"
              - "sudo systemctl enable httpd"
              - "sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php"
              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'database_name_here'/'
                    - Ref: DBName
                    - '''/g" /var/www/html/wp-config.php'

              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'username_here'/'
                    - Ref: DBUsername
                    - '''/g" /var/www/html/wp-config.php'

              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'password_here'/'
                    - Ref: DBPassword
                    - '''/g" /var/www/html/wp-config.php'
              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'localhost'/'
                    - Fn::GetAtt:
                        - MyDB
                        - Endpoint.Address
                    - '''/g" /var/www/html/wp-config.php'
              # setting proper permissions
              - "sudo chown apache:apache  -R *"
              - 'sudo find . -type d -exec chmod 755 {} \;'
              - 'sudo find . -type f -exec chmod 644 {} \;'
#------------------------------------------------------------------------------------------------#
#                                           Outputs                                              #
#------------------------------------------------------------------------------------------------#
Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - MyALB
          - DNSName
    Description: Click on URL to access wordpress website